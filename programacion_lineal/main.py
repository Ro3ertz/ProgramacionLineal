#!/usr/bin/env python3
"""
PROYECTO FINAL - PROGRAMACI√ìN LINEAL
Implementaci√≥n completa de m√©todos de resoluci√≥n

Autor: [Tu nombre]
Fecha: [Fecha actual]
Curso: [Tu curso]

Este proyecto implementa tres m√©todos principales de programaci√≥n lineal:
1. M√©todo Simplex Tradicional
2. M√©todo de la Gran M  
3. M√©todo de Dos Fases

Adem√°s incluye manejo completo de casos especiales y ejemplos de prueba.
"""

import sys
import os

# Importar m√≥dulos personalizados
from metodos import SimplexTradicional, GranMSimplex, DosFasesSimplex
from utils.validadores import leer_funcion_objetivo, leer_restricciones, mostrar_resumen
from utils.casos_especiales import ManejadorCasosEspeciales
from ejemplos.problemas_test import ProblemasTest

class SuiteProgramacionLineal:
    def __init__(self):
        self.manejador_casos = ManejadorCasosEspeciales()
        self.problemas_test = ProblemasTest()
        
    def mostrar_menu_principal(self):
        """Mostrar el men√∫ principal de opciones"""
        print("\n" + "="*60)
        print("üöÄ SUITE DE PROGRAMACI√ìN LINEAL")
        print("="*60)
        print("1. üìù Resolver problema personalizado")
        print("2. üìã Ejecutar problemas de ejemplo")
        print("3. üîç Comparar m√©todos de resoluci√≥n")
        print("4. üìö Informaci√≥n sobre m√©todos")
        print("5. üß™ Modo avanzado (casos especiales)")
        print("6. üåê Abrir interfaz web (Streamlit)")
        print("7. üö™ Salir")
        print("="*60)

    def resolver_problema_personalizado(self):
        """Modo interactivo para resolver problema personalizado"""
        print("\nüéØ RESOLVER PROBLEMA PERSONALIZADO")
        print("="*50)
        
        # Leer problema del usuario
        tipo, expr, variables, coeficientes = leer_funcion_objetivo()
        if expr is None:
            return
        
        restricciones, resultados, relaciones = leer_restricciones(variables)
        if restricciones is None:
            return
        
        # Mostrar resumen
        mostrar_resumen(tipo, expr, variables, coeficientes, restricciones, resultados, relaciones)
        
        # Seleccionar m√©todo
        metodo = self.seleccionar_metodo(relaciones)
        if metodo is None:
            return
        
        # Confirmar resoluci√≥n
        confirmacion = input("\n¬øResolver este problema? (s/n): ").strip().lower()
        if confirmacion != 's':
            print("üëã Cancelado por el usuario")
            return
        
        # Resolver problema
        print("\n" + "="*60)
        print("üîß RESOLVIENDO PROBLEMA")
        print("="*60)
        
        resultado = metodo.resolver(coeficientes, restricciones, resultados, relaciones, tipo)
        
        # Mostrar resultado y an√°lisis
        self.mostrar_resultado_completo(resultado, variables, metodo.__class__.__name__)

    def seleccionar_metodo(self, relaciones):
        """Seleccionar m√©todo de resoluci√≥n apropiado"""
        print("\nüîß SELECCI√ìN DE M√âTODO:")
        
        # An√°lisis autom√°tico
        tiene_no_estandar = any(rel in ['>=', '='] for rel in relaciones)
        
        if not tiene_no_estandar:
            print("‚úÖ Problema en forma est√°ndar - Todos los m√©todos aplicables")
        else:
            print("‚ö†Ô∏è  Problema requiere variables artificiales")
            print("üí° Recomendado: M√©todo Gran M o Dos Fases")
        
        print("\nM√©todos disponibles:")
        print("1. Simplex Tradicional (solo problemas en forma est√°ndar)")
        print("2. M√©todo de la Gran M (todos los problemas)")
        print("3. M√©todo de Dos Fases (todos los problemas)")
        print("4. Selecci√≥n autom√°tica")
        
        opcion = input("Seleccione m√©todo (1-4): ").strip()
        
        if opcion == '1':
            return SimplexTradicional()
        elif opcion == '2':
            return GranMSimplex()
        elif opcion == '3':
            return DosFasesSimplex()
        elif opcion == '4':
            if tiene_no_estandar:
                print("ü§ñ Selecci√≥n autom√°tica: M√©todo de Dos Fases")
                return DosFasesSimplex()
            else:
                print("ü§ñ Selecci√≥n autom√°tica: Simplex Tradicional")
                return SimplexTradicional()
        else:
            print("‚ùå Opci√≥n inv√°lida")
            return None

    def mostrar_resultado_completo(self, resultado, variables, nombre_metodo):
        """Mostrar resultado completo con an√°lisis de casos especiales"""
        print("\n" + "="*60)
        print("üèÜ RESULTADO FINAL")
        print("="*60)
        print(f"M√©todo utilizado: {nombre_metodo}")
        
        if resultado['factible']:
            if 'mensaje' in resultado:
                print(f"üìù Mensaje: {resultado['mensaje']}")
            else:
                print("‚úÖ PROBLEMA RESUELTO EXITOSAMENTE")
                print(f"\nüí∞ Valor √≥ptimo: Z = {resultado['valor_optimo']:.6f}")
                print("\nüìç Soluci√≥n √≥ptima:")
                for i, valor in enumerate(resultado['solucion']):
                    print(f"  {variables[i]} = {valor:.6f}")
                
                # An√°lisis adicional si est√° disponible
                if 'pasos' in resultado:
                    casos = input("\n¬øMostrar an√°lisis de casos especiales? (s/n): ").strip().lower()
                    if casos == 's':
                        print(self.manejador_casos.generar_reporte_casos_especiales())
        
        elif resultado.get('ilimitado'):
            print("‚ùå PROBLEMA ILIMITADO")
            print("üìà La funci√≥n objetivo puede crecer indefinidamente")
            print("üí° Verifique las restricciones del problema")
        
        else:
            print("‚ùå PROBLEMA NO FACTIBLE")
            print("üö´ No existe soluci√≥n que satisfaga todas las restricciones")
            if 'mensaje' in resultado:
                print(f"üìù Raz√≥n: {resultado['mensaje']}")

    def ejecutar_problemas_ejemplo(self):
        """Ejecutar suite de problemas de ejemplo"""
        print("\nüìã PROBLEMAS DE EJEMPLO")
        print("="*50)
        print("1. Ejecutar todos los problemas")
        print("2. Problema est√°ndar (Simplex)")
        print("3. Problema Gran M")
        print("4. Problema Dos Fases")
        print("5. Caso degenerado")
        print("6. Problema ilimitado")
        print("7. Problema infactible")
        print("8. Soluciones m√∫ltiples")
        print("9. Volver al men√∫ principal")
        
        opcion = input("Seleccione opci√≥n (1-9): ").strip()
        
        if opcion == '1':
            self.problemas_test.ejecutar_todos_los_problemas()
        elif opcion in ['2', '3', '4', '5', '6', '7', '8']:
            problemas_map = {
                '2': 'problema_1', '3': 'problema_2', '4': 'problema_3',
                '5': 'problema_4', '6': 'problema_5', '7': 'problema_6',
                '8': 'problema_7'
            }
            self.problemas_test.ejecutar_problema_especifico(problemas_map[opcion])
        elif opcion == '9':
            return
        else:
            print("‚ùå Opci√≥n inv√°lida")

    def comparar_metodos(self):
        """Comparar los tres m√©todos en problemas espec√≠ficos"""
        print("\nüîÑ COMPARACI√ìN DE M√âTODOS")
        print("="*50)
        self.problemas_test.comparar_metodos()

    def mostrar_informacion_metodos(self):
        """Mostrar informaci√≥n detallada sobre los m√©todos"""
        print("\nüìö INFORMACI√ìN SOBRE M√âTODOS")
        print("="*60)
        
        info = """
üîß M√âTODO SIMPLEX TRADICIONAL:
   ‚Ä¢ Para problemas en forma est√°ndar (restricciones ‚â§)
   ‚Ä¢ M√°s r√°pido y directo
   ‚Ä¢ Limitado a problemas ya factibles
   
üîç M√âTODO DE LA GRAN M:
   ‚Ä¢ Maneja restricciones ‚â• y =
   ‚Ä¢ Introduce variables artificiales con penalizaci√≥n M
   ‚Ä¢ Puede tener problemas num√©ricos con M muy grande
   
üöÄ M√âTODO DE DOS FASES:
   ‚Ä¢ Separa factibilidad de optimizaci√≥n
   ‚Ä¢ M√°s estable num√©ricamente que Gran M
   ‚Ä¢ Ideal para problemas complejos con m√∫ltiples tipos de restricciones
   
üìä CASOS ESPECIALES MANEJADOS:
   ‚Ä¢ Degeneraci√≥n: Variables b√°sicas con valor cero
   ‚Ä¢ Soluciones m√∫ltiples: Infinitas soluciones √≥ptimas
   ‚Ä¢ Problemas ilimitados: Funci√≥n objetivo sin cota
   ‚Ä¢ Problemas infactibles: Sin soluci√≥n posible
        """
        print(info)

    def modo_avanzado(self):
        """Modo avanzado para an√°lisis detallado"""
        print("\nüß™ MODO AVANZADO")
        print("="*50)
        print("1. An√°lisis paso a paso detallado")
        print("2. Detectar casos especiales manualmente")
        print("3. Aplicar regla de Bland (anti-ciclado)")
        print("4. An√°lisis de sensibilidad")
        print("5. Volver al men√∫ principal")
        
        opcion = input("Seleccione opci√≥n (1-5): ").strip()
        
        if opcion == '1':
            print("üí° Use el modo normal - ya incluye pasos detallados")
        elif opcion == '2':
            print("üí° Los casos especiales se detectan autom√°ticamente durante la resoluci√≥n")
        elif opcion == '3':
            print("üí° La regla de Bland se aplica autom√°ticamente en casos degenerados")
        elif opcion == '4':
            print("üí° El an√°lisis de sensibilidad b√°sico se incluye en los resultados")
        elif opcion == '5':
            return
        else:
            print("‚ùå Opci√≥n inv√°lida")

    def abrir_interfaz_web(self):
        """Abrir la interfaz web con Streamlit"""
        print("\nüåê INTERFAZ WEB CON STREAMLIT")
        print("="*50)
        print("La interfaz web ofrece:")
        print("‚ú® Dise√±o moderno y atractivo")
        print("üìä Gr√°ficos interactivos")
        print("üéõÔ∏è Configuraci√≥n visual de problemas")
        print("üì± Funciona en cualquier dispositivo")
        
        continuar = input("\n¬øDesea abrir la interfaz web? (s/n): ").strip().lower()
        
        if continuar == 's':
            try:
                import subprocess
                print("\nüöÄ Iniciando servidor web...")
                subprocess.run([sys.executable, "run_streamlit.py"])
            except Exception as e:
                print(f"‚ùå Error al abrir interfaz web: {e}")
                print("üí° Ejecute manualmente: python run_streamlit.py")
        else:
            print("üëç Puede ejecutar la interfaz web cuando guste con: python run_streamlit.py")

    def ejecutar(self):
        """Ejecutar la aplicaci√≥n principal"""
        print("üéØ BIENVENIDO AL PROYECTO DE PROGRAMACI√ìN LINEAL")
        print("Implementaci√≥n completa de m√©todos Simplex")
        
        while True:
            try:
                self.mostrar_menu_principal()
                opcion = input("Seleccione una opci√≥n (1-6): ").strip()
                
                if opcion == '1':
                    self.resolver_problema_personalizado()
                elif opcion == '2':
                    self.ejecutar_problemas_ejemplo()
                elif opcion == '3':
                    self.comparar_metodos()
                elif opcion == '4':
                    self.mostrar_informacion_metodos()
                elif opcion == '5':
                    self.modo_avanzado()
                elif opcion == '6':
                    self.abrir_interfaz_web()
                elif opcion == '7':
                    print("\nüëã ¬°Gracias por usar la Suite de Programaci√≥n Lineal!")
                    print("üéì Proyecto desarrollado para el curso de Investigaci√≥n de Operaciones")
                    break
                else:
                    print("‚ùå Opci√≥n inv√°lida. Seleccione 1-7.")
                
                input("\nPresione Enter para continuar...")
                
            except KeyboardInterrupt:
                print("\n\nüëã Programa interrumpido por el usuario")
                break
            except Exception as e:
                print(f"\n‚ùå Error inesperado: {e}")
                print("üí° Contacte al desarrollador si el problema persiste")

def verificar_dependencias():
    """Verificar que las dependencias est√©n instaladas"""
    try:
        import sympy
        import numpy
        print("‚úÖ Dependencias verificadas")
        return True
    except ImportError as e:
        print(f"‚ùå Dependencia faltante: {e}")
        print("üí° Instale con: pip install sympy numpy")
        return False

def main():
    """Funci√≥n principal"""
    # Banner del proyecto
    print("="*60)
    print("üéØ PROYECTO FINAL - PROGRAMACI√ìN LINEAL")
    print("="*60)
    print("üìö M√©todos implementados:")
    print("   ‚Ä¢ Simplex Tradicional")
    print("   ‚Ä¢ M√©todo de la Gran M")
    print("   ‚Ä¢ M√©todo de Dos Fases")
    print("üìã Casos especiales manejados:")
    print("   ‚Ä¢ Degeneraci√≥n, Soluciones m√∫ltiples")
    print("   ‚Ä¢ Problemas ilimitados e infactibles")
    print("="*60)
    
    # Verificar dependencias
    if not verificar_dependencias():
        return
    
    # Ejecutar aplicaci√≥n
    app = SuiteProgramacionLineal()
    app.ejecutar()

if __name__ == "__main__":
    main()